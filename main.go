package main

import (
	"fmt"
	"strconv"
)

func main() {
	var a string
	var b string
	fmt.Scan(&a, &b)

	// a = "46994590472209843046566548774768250822946406789518224959584849518535293114455336405675108213797445284106468059985573164169772595298148422006244554747824061989676746795180030861037695988399255091162430479868013620308386859017031898774500018531825753971646993991891211444821265710102367683034674606007280077314101590688094996137745043205286819662608929485593457230127225062556374828307628507877863316666778572060569755087069065415260959002232922790671536319274796274695657271529977554262455188197895456882525924189173813346904890057794512609458223191569877854758253263120935488692608275763133782037785687104041323225044961211708050448374121414718246968544068825381881900162684088194805467049249072756156423006897320355443030070142889661370584526675182135595848019723368834050770706671570544075302026947110659848725884476546858357967926215571362506955424806670189687941523270905265113936239895803536279540390716224264535950259078716160976468617651108191344627776200221223202609462787859086652214209329572794062609029374024290022547616858927067165660788602668912298465910918298741867069648851982742708229080404345178792833734764760667907254169516426096229484589580158220975401864877017888143085304714227858182848747414524256668567545594146172528015502662315696409842908148991942106096086248528228562643572385482492546938726523746623528950030170393953317214582335797782648217450629025793046456977504829515300972662465400240447881446574783891083636363554452449929769393130382136017598505387722236456039453167382941876091133999296297462488118629835631645702566552272577315269168244980993095493447404523142787627291558549194513810452550428602125686531723632579260036586606853785571597086569972301606144417559708784053570645467406521468128550328143250008337944611617184195360330149086248553222144200701348831922237345993499168689307434470674290635584167341458715160263186856146154895960536244966677506452659924210134483765351673764898630851211638388735145909964886058865905723903939896960628329050222808835490153381672104373069921002754463006463447512428889"
	// b = "46994590472209843046566548774768250822946406789518224959584849518535293114455336405675108213797445284106468059985573164169772595298148422006244554747824061989676746795180030861037695988399255091162430479868013620308386859017031898774500018531825753971646993991891211444821265710102367683034674606007280077314101590688094996137745043205286819662608929485593457230127225062556374828307628507877863316666778572060569755087069065415260959002232922790671536319274796274695657271529977554262455188197895456882525924189173813346904890057794512609458223191569877854758253263120935488692608275763133782037785687104041323225044961211708050448374121414718246968544068825381881900162684088194805467049249072756156423006897320355443030070142889661370584526675182135595848019723368834050770706671570544075302026947110659848725884476546858357967926215571362506955424806670189687941523270905265113936239895803536279540390716224264535950259078716160976468617651108191344627776200221223202609462787859086652214209329572794062609029374024290022547616858927067165660788602668912298465910918298741867069648851982742708229080404345178792833734764760667907254169516426096229484589580158220975401864877017888143085304714227858182848747414524256668567545594146172528015502662315696409842908148991942106096086248528228562643572385482492546938726523746623528950030170393953317214582335797782648217450629025793046456977504829515300972662465400240447881446574783891083636363554452449929769393130382136017598505387722236456039453167382941876091133999296297462488118629835631645702566552272577315269168244980993095493447404523142787627291558549194513810452550428602125686531723632579260036586606853785571597086569972301606144417559708784053570645467406521468128550328143250008337944611617184195360330149086248553222144200701348831922237345993499168689307434470674290635584167341458715160263186856146154895960536244966677506452659924210134483765351673764898630851211638388735145909964886058865905723903939896960628329050222808835490153381672104373069921002754463006463447512428889"

	fmt.Println(a_plus_b(&a, &b))
}

func a_plus_b(a *string, b *string) string {
	// 空间换时间
	cache := make(map[string]string)

	sum := "0"
	for j := len(*b) - 1; j >= 0; j-- {
		b_num_str := ""
		if j+1 >= len(*b) {
			b_num_str = (*b)[j:]
		} else {
			b_num_str = (*b)[j : j+1]
		}
		key := b_num_str + "*" + *a

		inner_sum := "0"
		if cache[key] != "" {
			inner_sum = cache[key]
		} else {
			for i := len(*a) - 1; i >= 0; i-- {
				a_num_str := ""
				if i+1 >= len(*a) {
					a_num_str = (*a)[i:]
				} else {
					a_num_str = (*a)[i : i+1]
				}
				inner_key := b_num_str + "*" + a_num_str

				product := "0"
				if cache[inner_key] != "" {
					product = cache[inner_key]
				} else {
					a_num := int((*a)[i] - '0')
					b_num := int((*b)[j] - '0')
					product = strconv.Itoa(a_num * b_num)
				}

				// cache
				times_key := "10^" + strconv.Itoa(len(*a)-i-1)
				if cache[times_key] == "" {
					cache[times_key] = pow_10_str(len(*a) - i - 1)
				}
				product = product + cache[times_key]

				// cache
				add_key := inner_sum + "+" + product
				if cache[add_key] == "" {
					cache[add_key] = a_add_b(&inner_sum, &product)
				}
				inner_sum = cache[add_key]

			}
			cache[key] = inner_sum
		}

		// cache
		times_key := "10^" + strconv.Itoa(len(*b)-j-1)
		if cache[times_key] == "" {
			cache[times_key] = pow_10_str(len(*b) - j - 1)
		}
		inner_sum = inner_sum + cache[times_key]

		// cache
		add_key := sum + "+" + inner_sum
		if cache[add_key] == "" {
			cache[add_key] = a_add_b(&sum, &inner_sum)
		}
		sum = cache[add_key]
	}

	return sum
}

func pow_10_str(times int) string {
	product := ""
	for i := 0; i < times; i++ {
		product += "0"
	}

	return product
}

func a_add_b(a *string, b *string) string {
	// 对齐
	if len(*a) > len(*b) {
		for i := len(*a) - len(*b); i > 0; i-- {
			*b = "0" + *b
		}
	} else {
		for i := len(*b) - len(*a); i > 0; i-- {
			*a = "0" + *a
		}
	}

	c := ""
	carry := 0
	for i := len(*a) - 1; i >= 0; i-- {
		sum := int((*a)[i]-'0'+(*b)[i]-'0') + carry
		c = strconv.Itoa(sum%10) + c
		if sum >= 10 {
			carry = 1
		} else {
			carry = 0
		}
	}
	if carry > 0 {
		c = "1" + c
	}

	nzero_idx := -1
	for i := 0; i < len(c); i++ {
		if c[i] != '0' {
			nzero_idx = i
			break
		}
	}

	if nzero_idx < 0 {
		return "0"
	} else {
		return c[nzero_idx:]
	}
}

func compose(m uint64, n uint64) uint64 {
	return factorial(n) / (factorial(n-m) * factorial(m))
}

func factorial(n uint64) uint64 {
	var product uint64 = 1
	for i := n; i > 0; i-- {
		product *= i
	}
	return product
}

func cal_index(base int, times int) int {
	product := 1
	for i := 0; i < times; i++ {
		product *= base
	}

	return product
}

func carve(o_x int, o_y int, edge_len int, diff_cube *[][]int) {
	// 递归基
	if edge_len == 1 {
		return
	}

	half_edge_len := edge_len / 2

	// 左上小正方形
	x1 := o_x
	y1 := o_y
	x2 := o_x + half_edge_len - 1
	y2 := o_y + half_edge_len - 1
	// 二维差分 -1
	(*diff_cube)[x1][y1] += (-1)
	(*diff_cube)[x1][y2+1] -= (-1)
	(*diff_cube)[x2+1][y1] -= (-1)
	(*diff_cube)[x2+1][y2+1] += (-1)

	// 右上小正方形
	carve(o_x, o_y+half_edge_len, half_edge_len, diff_cube)

	// 左下小正方形
	carve(o_x+half_edge_len, o_y, half_edge_len, diff_cube)

	// 右下小正方形
	carve(o_x+half_edge_len, o_y+half_edge_len, half_edge_len, diff_cube)
}

func make_cube(height int, width int, default_value rune) [][]rune {
	var cube [][]rune
	for i := 0; i < height; i++ {
		var some_row []rune
		for j := 0; j < width; j++ {
			some_row = append(some_row, default_value)
		}
		cube = append(cube, some_row)
	}

	return cube
}

func n2i(n rune) int {
	return int(n) - int('0')
}

func a2i(a rune) int {
	return int(a) - int('A') + 1
}

func reverse_num(input []byte) {
	if len(input) == 1 {
		fmt.Printf("%c", input[0])
	} else {
		for i := 0; i < len(input)/2; i++ {
			input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]
		}
		meet_not_zero := false
		for i := 0; i < len(input); i++ {
			if input[i] == '0' && !meet_not_zero {
				// 不输出
			} else {
				meet_not_zero = true
				fmt.Printf("%c", input[i])
			}
		}
	}
}

func num_len(num int) int {
	len := 0
	for num > 0 {
		num /= 10
		len += 1
	}

	return 1
}
